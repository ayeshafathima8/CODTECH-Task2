"Implemented a simple linear regression model to predict continuous target variables.
The project includes splitting the dataset into training and testing sets, training the model, and evaluating performance with Mean Squared Error and R-squared metrics.
Additionally, visualizations of the regression line and actual vs. predicted values are provided to assess model accuracy. Check out the code and insights!"

# Import necessary libraries
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

# Generate a simple dataset (or you can load one if available)
np.random.seed(0)
X = 2 * np.random.rand(100, 1)
y = 4 + 3 * X + np.random.randn(100, 1)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Create and train the linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"R-squared: {r2:.2f}")

# Visualize the regression line with training data
plt.figure(figsize=(10, 5))
plt.scatter(X, y, color="blue", label="Actual data")
plt.plot(X, model.predict(X), color="red", linewidth=2, label="Regression line")
plt.title("Linear Regression Model")
plt.xlabel("Feature")
plt.ylabel("Target")
plt.legend()
plt.show()

# Visualize actual vs. predicted values
plt.figure(figsize=(10, 5))
plt.scatter(y_test, y_pred, color="green")
plt.plot([y.min(), y.max()], [y.min(), y.max()], "k--", lw=2, color="blue")
plt.xlabel("Actual values")
plt.ylabel("Predicted values")
plt.title("Actual vs. Predicted Values")
plt.show()
